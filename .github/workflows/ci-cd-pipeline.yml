# .github/workflows/ci-cd-pipeline.yml
name: CI/CD Pipeline

# 触发条件：当代码推送到 main 分支，或创建 Pull Request 时触发
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 设置环境、安装依赖、运行测试
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]  # 并行执行不同 Python 版本的任务
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest

      - name: Upload test results
        if: success()  # 仅在测试通过时执行
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.python-version }}
          path: ./test-reports/

  # 部署任务，仅在测试成功时触发
  deploy:
    runs-on: ubuntu-latest
    needs: build  # 确保 'build' job 完成后再执行
    if: success()
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Deploy to production
        run: |
          echo "Deploying the application..."
          # Add your deployment script/commands here

      - name: Notify deployment
        run: |
          echo "Deployment completed."

  # 清理任务，用于上传最终的构建包
  package:
    runs-on: ubuntu-latest
    needs: build  # build 任务完成后执行
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Zip project files
        run: zip -r my_project.zip .

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: packaged-project
          path: ./my_project.zip
